bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odometry/filtered
    bt_loop_duration: 10
    default_server_timeout: 20
    transform_tolerance: 0.1
    wait_for_service_timeout: 1000
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator/NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
    # Action Nodes
      # path planning
      - nav2_compute_path_to_pose_action_bt_node        # Computes path to a specified pose.
      - nav2_compute_path_through_poses_action_bt_node  # Computes path through multiple poses.
      - nav2_smooth_path_action_bt_node                 # Smooths the planned path for optimal travel.
      # path following
      - nav2_follow_path_action_bt_node                 # Controls the robot to follow the computed path.
      # robot movement
      - nav2_spin_action_bt_node                        # Executes a spin action to reorient the robot.
      - nav2_back_up_action_bt_node                     # Moves the robot backward safely.
      - nav2_drive_on_heading_bt_node                   # Drives the robot in a specified direction.
      # recovery and teleoperation
      - nav2_assisted_teleop_action_bt_node             # Allows teleoperation with autonomous assistance.
      - nav2_recovery_node_bt_node                      # Executes a recovery action.
      # goal and path updates
      - nav2_goal_updater_node_bt_node                  # Updates the navigation goal.
      - nav2_truncate_path_action_bt_node               # Truncates the path for optimized navigation.
      - nav2_truncate_path_local_action_bt_node         # Locally truncates the path.
      - nav2_navigate_through_poses_action_bt_node      # Navigates through multiple poses in sequence.
      - nav2_navigate_to_pose_action_bt_node            # Navigates to a specific pose.
      - nav2_remove_passed_goals_action_bt_node         # Removes goals that have already been passed.
      # clear obstacles
      - nav2_clear_costmap_service_bt_node              # Clears obstacles from the costmap.
    # Condition Nodes
      # status checks
      - nav2_is_stuck_condition_bt_node                 # Checks if the robot is stuck.
      - nav2_is_path_valid_condition_bt_node            # Verifies if the current path is still valid.
      - nav2_goal_reached_condition_bt_node             # Determines if the robot has reached its goal.
      - nav2_goal_updated_condition_bt_node             # Checks if the goal has been updated.
      - nav2_globally_updated_goal_condition_bt_node    # Checks for a global goal update.
      # localization and transforms
      - nav2_initial_pose_received_condition_bt_node    # Checks if the initial pose has been received.
      - nav2_transform_available_condition_bt_node      # Checks if required transforms are available.
      # battery monitoring
      - nav2_is_battery_low_condition_bt_node           # Checks if the robot's battery level is low.
      - nav2_is_battery_charging_condition_bt_node      # Checks if the battery is charging.
      # time and distance monitoring
      - nav2_time_expired_condition_bt_node             # Checks if the defined time has expired.
      - nav2_path_expiring_timer_condition              # Checks if the path is about to expire.
      - nav2_distance_traveled_condition_bt_node        # Checks if a certain distance has been traveled.
    # Controller and Selector Nodes
      # controller selection
      - nav2_planner_selector_bt_node                   # Selects the appropriate planner.
      - nav2_controller_selector_bt_node                # Selects the appropriate controller.
      - nav2_goal_checker_selector_bt_node              # Selects the appropriate goal checker.
      # behavior controllers
      - nav2_rate_controller_bt_node                    # Controls behavior based on rate conditions.
      - nav2_distance_controller_bt_node                # Controls behavior based on distance conditions.
      - nav2_speed_controller_bt_node                   # Controls behavior based on speed conditions.
      # pipeline management
      - nav2_pipeline_sequence_bt_node                  # Manages sequence execution in the BT pipeline.
      - nav2_round_robin_node_bt_node                   # Manages BT sequence in a round-robin fashion.
    # Cancel Nodes
      - nav2_controller_cancel_bt_node                  # Cancels the current controller action.
      - nav2_wait_cancel_bt_node                        # Cancels the wait action.
      - nav2_spin_cancel_bt_node                        # Cancels the spin action.
      - nav2_back_up_cancel_bt_node                     # Cancels the back-up action.
      - nav2_assisted_teleop_cancel_bt_node             # Cancels the assisted teleoperation action.
      - nav2_drive_on_heading_cancel_bt_node            # Cancels the drive on heading action.
    # Other Nodes
      - nav2_wait_action_bt_node                        # Pauses the robot at its current position.
      - nav2_reinitialize_global_localization_service_bt_node # Reinitializes global localization.
      - nav2_single_trigger_bt_node                     # Single-use trigger for BT conditions.
      - nav2_goal_updated_controller_bt_node            # Updates the goal in the BT controller.
      - nav2_path_longer_on_approach_bt_node            # Checks if path length increases when approaching.

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    # https://github.com/ros-navigation/navigation2/blob/humble/nav2_controller/src/controller_server.cpp
    # https://docs.nav2.org/configuration/packages/configuring-controller-server.html             
    use_sim_time: False
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]     

    # Progress checker parameters
    progress_checker:
      # plugin: "nav2_controller::SimpleProgressChecker"
      # required_movement_radius: 0.1 # meters
      # movement_time_allowance: 15.0 # seconds
      plugin: "nav2_controller::PoseProgressChecker"
      required_movement_radius: 0.1 # meters
      required_movement_angle: 0.1 # seconds
      movement_time_allowance: 15.0 # seconds

    # Goal checker parameters
    general_goal_checker: #TODO: tune these values
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.5   # meters
      yaw_goal_tolerance: 0.5   # radians

    # DWB controller parameters
    FollowPath: #TODO: tune these values
      # https://docs.nav2.org/configuration/packages/configuring-dwb-controller.html#controller
      # https://github.com/ros-navigation/navigation2/blob/humble/nav2_dwb_controller/README.md

      
      # plugin: "nav2_rotation_shim_controller::RotationShimController"
      # angular_dist_threshold: 0.785
      # forward_sampling_distance: 0.5
      # rotate_to_heading_angular_vel: 1.8
      # max_angular_accel: 3.2
      # simulate_ahead_time: 1.0

      # primary_controller: "dwb_core::DWBLocalPlanner"
      # plugin: "dwb_core::DWBLocalPlanner" 
      # debug_trajectory_details: True
      # min_vel_x: 0.0
      # min_vel_y: 0.0
      # max_vel_x: 0.26
      # max_vel_y: 0.0
      # max_vel_theta: 1.8
      # min_speed_xy: 0.0
      # max_speed_xy: 0.26
      # min_speed_theta: 1.5  
      # acc_lim_x: 2.5
      # acc_lim_y: 0.0
      # acc_lim_theta: 3.2
      # decel_lim_x: -2.5
      # decel_lim_y: 0.0
      # decel_lim_theta: -3.2
      # vx_samples: 20
      # vy_samples: 5
      # vtheta_samples: 20
      # sim_time: 1.7
      # linear_granularity: 0.05
      # angular_granularity: 0.1 #0.05 #0.025
      # transform_tolerance: 0.5 # sec
      # xy_goal_tolerance: 0.5 # config this to make tolerance --> imp
      # trans_stopped_velocity: 0.25
      # short_circuit_trajectory_evaluation: True
      # stateful: True
      # # TODO: tune these values

      # critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      # BaseObstacle.scale: 0.02
      # PathAlign.scale: 32.0
      # PathAlign.forward_point_distance: 0.1
      # GoalAlign.scale: 24.0
      # GoalAlign.forward_point_distance: 0.1
      # PathDist.scale: 32.0
      # GoalDist.scale: 24.0
      # RotateToGoal.scale: 32.0
      # RotateToGoal.slowing_factor: 5.0
      # RotateToGoal.lookahead_time: -1.0

      # https://docs.nav2.org/configuration/packages/configuring-regulated-pp.html#regulated-pure-pursuit-parameters
      # primary_controller: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.5
      lookahead_dist: 0.6
      min_lookahead_dist: 0.3
      max_lookahead_dist: 0.9
      lookahead_time: 1.5
      rotate_to_heading_angular_vel: 1.8
      transform_tolerance: 0.1
      use_velocity_scaled_lookahead_dist: false
      min_approach_linear_velocity: 0.05
      approach_velocity_scaling_dist: 1.0
      use_collision_detection: true
      max_allowed_time_to_collision_up_to_carrot: 1.0
      use_regulated_linear_velocity_scaling: true
      use_cost_regulated_linear_velocity_scaling: false
      regulated_linear_scaling_min_radius: 0.9
      regulated_linear_scaling_min_speed: 0.25
      use_rotate_to_heading: true
      rotate_to_heading_min_angle: 0.785
      max_angular_accel: 3.2
      max_robot_pose_search_dist: 10.0
      use_interpolation: false
      cost_scaling_dist: 0.3
      cost_scaling_gain: 1.0
      inflation_cost_scaling_factor: 3.0


local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: False
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_footprint
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      footprint: "[ [-0.75, 0.75], [0.75, 0.75], [0.75, -0.75], [-0.75, -0.75] ]"  
      plugins: ["obstacle_layer", "inflation_layer"]
      
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55

      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: False
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      footprint: "[ [-0.75, 0.75], [0.75, 0.75], [0.75, -0.75], [-0.75, -0.75] ]"  
      rolling_window: True                 
      width: 50                            
      height: 50                           
      track_unknown_space: true
      plugins: ["obstacle_layer", "inflation_layer"]
      
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55
      always_send_full_costmap: True

# map_server:
#   ros__parameters:
#     use_sim_time: False
#     # Overridden in launch by the "map" launch configuration or provided default value.
#     # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
#     yaml_filename: ""

# map_saver:
#   ros__parameters:
#     use_sim_time: False
#     save_map_timeout: 5.0
#     free_thresh_default: 0.25
#     occupied_thresh_default: 0.65
#     map_subscribe_transient_local: True

planner_server: 
  ros__parameters:
    # https://docs.nav2.org/configuration/packages/configuring-navfn.html#parameters
    use_sim_time: False
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    GridBased: #TODO: tune these values
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5 # meters
      use_astar: false
      use_final_approach_orientation: false
      allow_unknown: true  

smoother_server:
  ros__parameters:
    use_sim_time: False
    smoother_plugins: ["simple_smoother"]
    costmap_topic: global_costmap/costmap_raw
    footprint_topic: global_costmap/published_footprint
    robot_base_frame: base_footprint
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    use_sim_time: False
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_footprint
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.5
    min_rotational_vel: 1.2
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    use_sim_time: False
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 20

velocity_smoother:
  ros__parameters: # TODO: tune these values
    # https://docs.nav2.org/configuration/packages/configuring-velocity-smoother.html
    use_sim_time: False
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.26, 0.0, 1.8]
    min_velocity: [-0.26, 0.0, -1.8]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odometry/filtered" # only works if in CLOSED_LOOP
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0





